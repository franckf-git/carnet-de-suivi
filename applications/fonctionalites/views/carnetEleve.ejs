<% include ./../../views/headerConnecte %>

<section class="section container">
    <div class="columns">
        <div class="column">
            <a class="button is-primary is-fullwidth" href="/exportcsa">Retour</a>
        </div>
        <div class="column">
            <a class="button export-pdf is-fullwidth">Exporter en PDF</a>
        </div>
    </div>
</section>

<section class="hero is-bold has-background-grey-lighter">
    <div class="hero-body">
        <div class="container">
            <h2 class="title">
                <%= typeof titre != 'undefined' ? titre : 'Carnet de Suivi' %>
            </h2>
            <h3 class="subtitle">
                El√®ve de <%= typeof pseudo != 'undefined' ? pseudo : 'pseudo' %>
            </h3>
        </div>
    </div>
</section>

<section class="section container">
    <div class="tabs is-centered">
        <ul class="tabs-domaines">
        </ul>
    </div>
</section>

<section class="section">
    <div class="container">
        <% retourParEvaluation.forEach(evaluation => { %>
        <div class="box">
            <div class="domaine is-hidden" id="<%= evaluation.domaine.id %>"><%= evaluation.domaine.domaine %></div>
            <div class="objectif is-hidden" id="<%= evaluation.objectif.id %>">objectif : <%= evaluation.objectif.objectif %>
            </div>
            <div class="attendu is-hidden" id="<%= evaluation.attendu.id %>">attendu : <%= evaluation.attendu.attendu %></div>
            <div class="observation">observation titre : <%= evaluation.observation.titre %></div>
            <div class="observation-description">observation description : <%= evaluation.observation.description %></div>
            <div class="observation-date">observation creation : <div class="is-italic">
                    <%= evaluation.observation.creation %></div>
            </div>
            <div class="evaluation tag" id="<%= evaluation.evaluation %>"></div>
            <p><br></p>
        </div>
        <% }); %>
    </div>
</section>

<section class="is-hidden">
    <% criteres.forEach(critere => { %>
    <div class="critere" data-value="<%= critere.couleur %>" id="<%= critere.id %>"><%= critere.critere %></div>
    <% }); %>
</section>

<script>
    /* Creation des tabulations par Domaines */
    const domaines = document.querySelectorAll('.domaine')
    const tabsDomaines = document.querySelector('.tabs-domaines')

    const creationDesBouttonsDomainesUniques = () => {
        const domainesUniques = []
        domaines.forEach((domaineAtrier) => {
            const infosUtiles = {
                id: domaineAtrier.id, texte: domaineAtrier.innerHTML
            }
            const infosUtilesPourUniq = JSON.stringify(infosUtiles)
            if (!domainesUniques.includes(infosUtilesPourUniq)) {
                domainesUniques.push(infosUtilesPourUniq)
            }
        })
        domainesUniques.forEach(domaine => {
            const tabDomaine = document.createElement('li')
            const buttonDomaine = document.createElement('a')
            tabDomaine.appendChild(buttonDomaine)
            const domaineObject = JSON.parse(domaine)
            buttonDomaine.innerHTML = `${domaineObject.texte}`
            buttonDomaine.classList.add('filtrage-domaine')
            buttonDomaine.id = domaineObject.id
            tabsDomaines.appendChild(tabDomaine)
        })
    }
    creationDesBouttonsDomainesUniques()

    const filtrageDomaines = document.querySelectorAll('.filtrage-domaine')
    filtrageDomaines.forEach(filtrageDomaine => {
        filtrageDomaine.addEventListener('click', () => {
            filtrageDomaines.forEach(filtrageDomaine => filtrageDomaine.parentElement.classList.remove('is-active'))
            filtrageDomaine.parentElement.classList.add('is-active')
            affichageParDomaine(filtrageDomaine.id)
        })
    })
    const affichageParDomaine = (id) => {
        domaines.forEach((domaine) => {
            domaine.parentElement.classList.add('is-hidden')
            if (domaine.id === id) {
                domaine.parentElement.classList.remove('is-hidden')
            }
        })
    }

    // const objectifs = document.querySelectorAll('.objectif')
    // const attendus = document.querySelectorAll('.attendu')

    /* affectation des criteres aux evaluations */
    const evaluations = document.querySelectorAll('.evaluation')
    const criteres = document.querySelectorAll('.critere')
    evaluations.forEach(evaluation => {
        criteres.forEach(critere => {
            if (critere.id === evaluation.id) {
                const couleur = critere.getAttribute('data-value')
                evaluation.classList.add(couleur)
                evaluation.innerHTML = critere.innerHTML
            }
        })
    });

</script>

<script src='public/javascripts/pdfmake/pdfmake.min.js'></script>
<script src='public/javascripts/pdfmake/vfs_fonts.js'></script>
<script>
    const listEvaluations = []
    const boxEvaluations = document.querySelectorAll('.box').forEach((evaluations) => {
        listEvaluations.push(evaluations.innerText)
    })

    const docDefinition = {
        content: [
            `${document.querySelector('.title').innerHTML}`,
            `${document.querySelectorAll('.subtitle')[1].innerHTML}`,
            `${listEvaluations}`
        ]
    }

    const exportPdf = document.querySelector('.export-pdf')
    exportPdf.addEventListener('click', () => {
        pdfMake.createPdf(docDefinition).open()
    })
</script>

<% include ./../../views/footer %>
