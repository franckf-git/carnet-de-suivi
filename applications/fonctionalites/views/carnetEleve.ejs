<% include ./../../views/headerConnecte %>

<script src="/javascripts/application/accordions.js" type="module" defer></script>

<section class="section container">
    <div class="columns">
        <div class="column">
            <a class="button is-primary is-fullwidth" href="/exportcsa">Retour</a>
        </div>
        <div class="column">
            <a class="button export-pdf is-fullwidth">Exporter en PDF</a>
        </div>
    </div>
</section>

<section class="hero is-bold has-background-grey-lighter">
    <div class="hero-body">
        <div class="container">
            <h2 class="title">
                <%= typeof titre != 'undefined' ? titre : 'Carnet de Suivi' %>
            </h2>
            <h3 class="subtitle">
                Elève de <%= typeof pseudo != 'undefined' ? pseudo : 'pseudo' %>
            </h3>
        </div>
    </div>
</section>

<section class="section container">
    <div class="tabs is-centered">
        <ul>
            <li class="is-active"><a class="filtrage-domaine" id="0">Tous</a></li>
            <li><a class="filtrage-domaine" id="1">Oral</a></li>
            <li><a class="filtrage-domaine" id="2">Ecrit</a></li>
            <li><a class="filtrage-domaine" id="3">Physique</a></li>
            <li><a class="filtrage-domaine" id="4">Arts</a></li>
            <li><a class="filtrage-domaine" id="5">Construire</a></li>
            <li><a class="filtrage-domaine" id="6">Explorer</a></li>
        </ul>
    </div>
</section>

<section class="section">
    <div class="container">
        <% if ( typeof retourParEvaluation[0] === 'undefined') { %>
        <h2 class="title is-italic has-text-centered">Il n'y a pas d'observations pour cet élève.</h2>
        <% } else { %>
        <% retourParEvaluation.forEach(evaluation => { %>
        <button class="accordion has-background-grey-lighter is-large"><%= evaluation.observation.titre %> <span class="is-pulled-right">
                <div class="evaluation tag" id="<%= evaluation.evaluation %>"></div>
            </span></button>
        <div class="panel">
            <div class="domaine" id="<%= evaluation.domaine.id %>">Domaine d'apprentissage : <span class="is-pulled-right has-text-weight-bold"><%= evaluation.domaine.domaine %></span></div>
            <div class="objectif" id="<%= evaluation.objectif.id %>">Objectif visé(s) : <span class="is-pulled-right has-text-weight-bold"><%= evaluation.objectif.objectif %></span>
            </div>
            <div class="attendu" id="<%= evaluation.attendu.id %>">Ce qui est attendu : <span class="is-pulled-right has-text-weight-bold"><%= evaluation.attendu.attendu %></span></div>
            <div class="observation-description">Description de l'activité : <span class="is-pulled-right has-text-weight-bold"><%= evaluation.observation.description %></span></div>
            <div class="observation-date">Fait le : <span class="is-pulled-right is-italic">
                    <%= evaluation.observation.creation %></span>
            </div>
        </div>
        <% }); %>
        <% } %>
    </div>
</section>

<section class="is-hidden">
    <% criteres.forEach(critere => { %>
    <div class="critere" data-value="<%= critere.couleur %>" id="<%= critere.id %>"><%= critere.critere %></div>
    <% }); %>
</section>

<script>
    /* Affichage des observations par Domaines */
    const domaines = document.querySelectorAll('.domaine')

    const filtrageDomaines = document.querySelectorAll('.filtrage-domaine')
    filtrageDomaines.forEach(filtrageDomaine => {
        filtrageDomaine.addEventListener('click', () => {
            filtrageDomaines.forEach(filtrageDomaine => filtrageDomaine.parentElement.classList.remove('is-active'))
            filtrageDomaine.parentElement.classList.add('is-active')
            affichageParDomaine(filtrageDomaine.id)
        })
    })
    const affichageParDomaine = (id) => {
        domaines.forEach((domaine) => {
            const panels = document.querySelectorAll('.panel')
            const accordions = document.querySelectorAll('.accordion')
            panels.forEach(panel => panel.style.display = 'none')
            accordions.forEach(ligne => {
                ligne.classList.remove('has-background-primary')
                ligne.classList.remove('has-text-white')
            })
            domaine.parentElement.previousElementSibling.classList.add('is-hidden')
            if (domaine.id === id || id === "0") {
                domaine.parentElement.previousElementSibling.classList.remove('is-hidden')
            }
        })
    }

    // const objectifs = document.querySelectorAll('.objectif')
    // const attendus = document.querySelectorAll('.attendu')

    /* affectation des criteres aux evaluations */
    const evaluations = document.querySelectorAll('.evaluation')
    const criteres = document.querySelectorAll('.critere')
    evaluations.forEach(evaluation => {
        criteres.forEach(critere => {
            if (critere.id === evaluation.id) {
                const couleur = critere.getAttribute('data-value')
                evaluation.classList.add(couleur)
                evaluation.innerHTML = critere.innerHTML
            }
        })
    });

</script>

<script src='public/javascripts/pdfmake/pdfmake.min.js'></script>
<script src='public/javascripts/pdfmake/vfs_fonts.js'></script>
<script>
    const listEvaluations = []
    const boxEvaluations = document.querySelectorAll('.box').forEach((evaluations) => {
        listEvaluations.push(evaluations.innerText)
    })

    const docDefinition = {
        content: [
            `${document.querySelector('.title').innerHTML}`,
            `${document.querySelectorAll('.subtitle')[1].innerHTML}`,
            `${listEvaluations}`
        ]
    }

    const exportPdf = document.querySelector('.export-pdf')
    exportPdf.addEventListener('click', () => {
        pdfMake.createPdf(docDefinition).open()
    })
</script>

<% include ./../../views/footer %>
